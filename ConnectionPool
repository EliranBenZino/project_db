package projectDb;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.ArrayList;

public class ConnectionPool {

	private static ConnectionPool instance;
	private ArrayList<Connection> connections;
	private static final int MAX_CONNECTIONS = 5;

	// private Ctor to avoid creating new instances!
	private ConnectionPool() {
		connections = new ArrayList<>();
		// load the driver into the memory
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");

			// create 5 connections
			for (int i = 0; i < MAX_CONNECTIONS; i++) {
				try {
					connections.add(DriverManager.getConnection(
"jdbc:mysql://localhost:3306/project1?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC","root", "1234"));
				} catch (SQLException e) {
					System.out.println("couldn't connect");
				}
			}
		} catch (ClassNotFoundException e) {
			System.out.println(e.getMessage() + "wasn't found!");
		}
	}

	// return the only instance of connectionPool
	public static ConnectionPool getInstance() {
		if (instance == null) {
			instance = new ConnectionPool();
		}
		return instance;
	}

	// get free connection
	public synchronized Connection getConnection() {
		// check if there are no connections available
		while (connections.size() == 0) {
			try {
				wait();
			} catch (InterruptedException e) {
			}
		}
		Connection con = connections.get(0);
		connections.remove(0);
		return con;

	}

	// return conection after used to the arraylist
	public synchronized void restoreConnection(Connection con) {
		connections.add(con);
		notify();

	}

	// close all connection when shutting down the system
	public synchronized void closeAllConnection() {
		while (connections.size() < MAX_CONNECTIONS) {
			try {
				wait();
			} catch (InterruptedException e) {
			}
			for (Connection connection : connections) {
				try {
					connection.close();
				} catch (SQLException e) {
				}
			}
		}

	}

}
